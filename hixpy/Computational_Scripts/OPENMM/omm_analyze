#!/usr/bin/env python3
import os
import sys

def Analysis(trajname, prmtopfile, res_num, autoimage=False):
    filename = prmtopfile.split(".")[0]    
    f = open("Analysis.txt","w+")
    f.write("trajin "+trajname+"\n")
    f.write("strip :K+,Cl- \n")
    f.write("strip !(:1-"+str(res_num)+")\n")
    if autoimage == True:
        f.write("autoimage\n")
    f.write("rms first perres :1-"+str(res_num)+" out RMSD.dat\n")
    f.write("atomicfluct RMSF_ByRes :1-"+str(res_num)+" out RMSF_ByRes.dat byres\n")
    f.write('''matrix correl name corrpath out matrix.correl :1-{} byres
matrix covar name normal_modes :1-{}@CA,P,ZN
diagmatrix normal_modes out matrix_diag.covar \
vecs 100 \
reduce \
nmwiz nmwizvecs 100 \
nmwizfile first_100_modes.nmd \
nmwizmask :1-{}@CA,P,ZN 

hbond dist 3.0 avgout HBond_Report.dat 

run
'''.format(res_num,res_num,res_num))
    f.close()
    os.system("jobtemplatecpu "+filename+"_analysis")
    os.system("echo \"module load amber/19-mvapich2\" >> CPUJobScript.sh")
    os.system("echo \"mpirun -np 20 -hostfile \$PWD/PBS_NODEFILE \$AMBERHOME/bin/cpptraj.MPI -p "+prmtopfile+" -i Analysis.txt -o Analysis.log\" >> CPUJobScript.sh")
    os.system("echo \"mkdir -p Analysis\" >> CPUJobScript.sh")
    os.system("echo \"mv RMSF_ByRes.dat Analysis/ \" >> CPUJobScript.sh")
    os.system("echo \"mv matrix.correl Analysis/ \" >> CPUJobScript.sh")
    os.system("echo \"mv matrix_diag.covar Analysis/ \" >> CPUJobScript.sh")
    os.system("echo \"mv first_100_modes.nmd Analysis/ \" >> CPUJobScript.sh")
    os.system("echo \"mv HBond_Report.dat Analysis/ \" >> CPUJobScript.sh")
    os.system("echo \"mv Analysis.sh Analysis/ \" >> CPUJobScript.sh")
    os.system("echo \"mv Analysis.txt Analysis/ \" >> CPUJobScript.sh")
    os.system("echo \"mv RMSD.dat Analysis/ \" >> CPUJobScript.sh")

    os.system("mv CPUJobScript.sh Analysis.sh")
    os.system("qsub Analysis.sh")
    return

if __name__ == "__main__":
    if len(sys.argv) == 4: 
        Analysis(sys.argv[1],sys.argv[2],sys.argv[3])
    elif len(sys.argv) == 5 and sys.argv[4]=='autoimage':
        Analysis(sys.argv[1],sys.argv[2],sys.argv[3],autoimage=True)
    else:
        print("Syntax Error: Expected 3 or 4 arguments:\n\nomm_analyze <trajectory> <topology> <number of residues> [<autoimage>]\n\n")

