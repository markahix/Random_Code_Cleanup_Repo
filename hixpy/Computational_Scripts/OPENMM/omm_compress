#!/usr/bin/env python3
import os
import sys

def Compress_Trajectory(filename, current_step, outname,autoimage=False,mask=":1"):
    f=open("temp_command.txt","w+")
    prmtopfile = filename+".prmtop"
    for i in range(1,current_step+1):
        f.write("trajin "+filename+"_"+str(i)+".dcd\n")
    if autoimage == True:
#        f.write("image origin center familiar\n")
        f.write("autoimage anchor "+mask+"\n")
    f.write("trajout "+outname+" mdcrd\nrun\n")
    f.close()
    os.system("jobtemplatecpu "+filename+"_compress")
    os.system("echo \"module load amber/19-mvapich2\" >> CPUJobScript.sh")
    os.system("echo \"mpirun -np 20 -hostfile \$PWD/PBS_NODEFILE \$AMBERHOME/bin/cpptraj.MPI -p "+prmtopfile+" -i temp_command.txt -o Compress_Trajectory.log\" >> CPUJobScript.sh")
    os.system("echo \"rm temp_command.txt\" >> CPUJobScript.sh")
    os.system("echo \"mkdir -p Fragments\" >> CPUJobScript.sh")
    os.system("echo \"mv *.dcd Fragments/\" >> CPUJobScript.sh")
    os.system("echo \"tar -czvf Fragments.tar.gz Fragments/\" >> CPUJobScript.sh")
    os.system("mv CPUJobScript.sh Compress_Trajectory.sh")
    os.system("qsub Compress_Trajectory.sh")
    return

if __name__ == "__main__":
    if len(sys.argv) < 4:
        print("Syntax error: expected 3 arguments after call.\n\nomm_compress <filename> <current step> <output file>\n\nOPTIONAL:\n\nomm_compress <filename> <current step> <output file> autoimage <atom mask>\n\n")
    elif len(sys.argv) == 6 and sys.argv[4] == 'autoimage':
        Compress_Trajectory(sys.argv[1],int(sys.argv[2]),sys.argv[3],autoimage=True,mask=sys.argv[5])
    else:
        Compress_Trajectory(sys.argv[1],int(sys.argv[2]),sys.argv[3])
